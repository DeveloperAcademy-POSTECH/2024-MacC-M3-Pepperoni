//
//  CharacterDetailView.swift
//  Pepperoni
//
//  Created by Hyun Jaeyeon on 10/30/24.
//

import SwiftUI
import SwiftData
import AVFoundation
import SwiftData

struct CharacterDetailView: View {
    let character: Character
    
    @State private var selectedIndex: Int? = 0
    @State private var selectedImage: Data?
    @State private var isCameraPickerPresented = false
    
    let itemHeight: CGFloat = 58.0
    let menuHeightMultiplier: CGFloat = 5
    
    @Query(filter: #Predicate<Character> { $0.favorite == true })
    private var favoriteCharacters: [Character]
    
    @State private var showAlert: Bool = false
    
    var body: some View {
        VStack {
            ZStack {
                Rectangle()
                    .foregroundStyle(.gray1)
                    .frame(height: 584)
                    .cornerRadius(60)
                
                VStack {
                    // -MARK: Ï∫êÎ¶≠ÌÑ∞ ÌîÑÎ°úÌïÑ
                    ZStack {
                        if let selectedImage = character.image, let image = UIImage(data: selectedImage) {
                            Image(uiImage: image)
                                .resizable()
                                .scaledToFill()
                                .frame(width: 134, height: 134)
                                .clipShape(Rectangle())
                        } else {
                            // Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ
                            Rectangle()
                                .foregroundStyle(.darkGray)
                                .frame(width: 134, height: 134)
                                .border(.white, width: 3)
                            
                            Image(systemName: "person.fill")
                                .resizable()
                                .frame(width: 82, height: 87)
                                .foregroundStyle(.blueWhite)
                        }
                        
                        // ÏÇ¨ÏßÑ Ï∂îÍ∞Ä Î≤ÑÌäº
                        Button {
                            isCameraPickerPresented = true
                        } label: {
                            ZStack{
                                Circle()
                                    .frame(width: 40, height: 40)
                                    .foregroundStyle(.lightGray1)
                                
                                Image(systemName: "plus")
                                    .foregroundStyle(.darkGray)
                            }
                        }
                        .offset(x: 60, y: 56)
                    }
                    .padding(.bottom, 4)
                    
                    Text("\(character.name)")
                        .font(.title)
                        .fontWeight(.medium)
                        .foregroundStyle(.white)
                    
                    // -MARK: Ï¥ùÏ†êÏàò, Î≥Ñ, Îã¨ÏÑ±Î•†
                    VStack(alignment: .leading) {
                        HStack {
                            Text("Ï¥ùÏ†êÏàò")
                                .padding(.bottom, 2)
                                .foregroundStyle(.gray1)
                            
                            Spacer()
                            
                            Rectangle()
                                .frame(width: 151, height: 1)
                                .foregroundStyle(.lightGray2)
                            
                            Spacer()
                            
                            Text("\(calculateScoresAndPasses(for: character).totalScore)")
                                .padding(.bottom, 2)
                                .fontWeight(.medium)
                                .foregroundStyle(.pointBlue)
                        }
                        
                        HStack {
                            Text("Î≥Ñ")
                                .padding(.bottom, 2)
                                .foregroundStyle(.gray1)
                            
                            Spacer()
                            
                            Rectangle()
                                .frame(width: 151, height: 1)
                                .foregroundStyle(.lightGray2)
                            
                            Spacer()
                            
                            Text("\(calculateScoresAndPasses(for: character).totalPasses)")
                                .padding(.bottom, 2)
                                .fontWeight(.medium)
                                .foregroundStyle(.pointBlue)
                        }
                        
                        HStack {
                            Text("Îã¨ÏÑ±Î•†")
                            
                            Spacer()
                            
                            // Îã¨ÏÑ±Î•†ÏùÑ ÎÇòÌÉÄÎÇ¥Îäî Î∞î
                            GeometryReader { geometry in
                                let totalQuotes = character.quotes.count
                                let completedQuotes = character.completedQuotes
                                let ratio = totalQuotes > 0 ? CGFloat(completedQuotes) / CGFloat(totalQuotes) : 0
                                
                                AchievementBar(ratio: ratio)
                            }
                            .frame(width: 188, height: 20)
                            
                            Spacer()
                            
                            Text("\(character.completedQuotes)/\(character.quotes.count)")
                                .fontWeight(.medium)
                                .foregroundStyle(.pointBlue)
                        }
                    }
                    .padding()
                    .background(Color.white)
                    .cornerRadius(10)
                    .padding()
                    
                    Spacer()
                    
                    // -MARK: ÎåÄÏÇ¨ Î¶¨Ïä§Ìä∏
                    QuoteListView(character: character, selectedIndex: $selectedIndex)
                }
            }
            .sheet(isPresented: $isCameraPickerPresented) {
                ImagePickerView(selectedImageData: $selectedImage,
                           mode: .photoLibrary)
            }
        }
        .padding()
        .background(.darkGray)
        .onChange(of: selectedImage) {
            // Ïù¥ÎØ∏ÏßÄ Îì±Î°ù Ïãú, SwiftDataÏóê Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
            if let newImageData = selectedImage {
                character.updateImage(newImageData)
            }
        }
        // -MARK: NavigationBar
        .toolbar {
            ToolbarItem(placement: .topBarLeading) {
                BackButton()
            }
            
            ToolbarItem(placement: .topBarTrailing) {
                Button(action: {
                    toggleFavorite()
                }) {
                    ZStack{
                        Image(systemName: character.favorite ? "heart.fill" : "heart")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 26, height: 25)
                            .foregroundStyle(character.favorite ? .blue1 : .clear)
                        
                        Image(systemName: "heart")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 26, height: 25)
                            .foregroundStyle(.white)
                    }
                }
            }
        }
        .alert(isPresented: $showAlert) {
            Alert(title: Text("ÏµúÏï† ÏûêÎ¶¨Í∞Ä Îã§ Ï∞ºÏñ¥Ïöî"), message: Text("ÏµúÏï† Ï∫êÎ¶≠ÌÑ∞Îäî 3Í∞úÍπåÏßÄ ÏÑ§Ï†ï Í∞ÄÎä•Ìï¥Ïöîü•π"), dismissButton: .default(Text("ÌôïÏù∏")))
        }
    }
    
    /// Î≥Ñ, Ï¥ùÏ†êÏàò Í≥ÑÏÇ∞ Ìï®Ïàò
    func calculateScoresAndPasses(for character: Character) -> (totalScore: Int, totalPasses: Int) {
        var totalScore = 0
        var totalPasses = 0
        
        for quote in character.quotes {
            // Ï†êÏàò Ï¥ùÌï© Í≥ÑÏÇ∞
            totalScore += Int(quote.evaluation.pronunciationScore)
            totalScore += Int(quote.evaluation.intonationScore)
            totalScore += Int(quote.evaluation.speedScore)
            
            // Ìå®Ïä§ ÌöüÏàò Ï¥ùÌï© Í≥ÑÏÇ∞
            if quote.evaluation.pronunciationPass { totalPasses += 1 }
            if quote.evaluation.intonationPass { totalPasses += 1 }
            if quote.evaluation.speedPass { totalPasses += 1 }
        }
        
        return (totalScore, totalPasses)
    }
    
    /// ÏµúÏï†(favorite) ÏÑ§Ï†ï Ìï®Ïàò
    private func toggleFavorite() {
        if favoriteCharacters.count < 3 || character.favorite {
            character.favorite.toggle()
        } else {
            showAlert = true
        }
    }
}

/// ÎåÄÏÇ¨ Î¶¨Ïä§Ìä∏ Î∑∞
struct QuoteListView: View {
    let character: Character
    @Binding var selectedIndex: Int?
    
    let itemHeight: CGFloat = 58.0
    
    var body: some View {
        ScrollView(.vertical) {
            LazyVStack(spacing: 0) {
                Spacer().frame(height: itemHeight * 2.5) // Ïä§ÌÅ¨Î°§ Ïó¨Ïú† Í≥µÍ∞Ñ
                
                ForEach(0..<character.quotes.count, id: \.self) { index in
                    let quote = character.quotes[index]
                    let evaluation = quote.evaluation
                    let passCount = [evaluation.pronunciationPass, evaluation.intonationPass, evaluation.speedPass].filter { $0 }.count
                    
                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Text("#\(index + 1)")
                                .foregroundStyle(.white)
                                .font(.title3)
                                .fontWeight(.bold)
                            
                            Spacer()
                            
                            // Î≥Ñ
                            HStack(spacing: 4) {
                                ForEach(0..<3) { i in
                                    if i < passCount {
                                        Text(Image(systemName: "star.fill"))
                                            .foregroundStyle(.white)
                                    } else {
                                        Text(Image(systemName: "star"))
                                            .foregroundStyle(.white)
                                    }
                                }
                            }
                        }
                        
                        // ÌïúÍµ≠Ïñ¥
                        Text(quote.korean.joined(separator: " "))
                            .foregroundStyle(.white)
                            .font(.title3)
                            .fontWeight(.bold)
                            .fixedSize(horizontal: false, vertical: true)
                        
                        // ÏùºÎ≥∏Ïñ¥ - selectedIndexÏùº ÎïåÎßå
                        if index == selectedIndex {
                            Text(quote.japanese.joined(separator: " "))
                                .foregroundStyle(.white)
                                .font(.title3)
                                .fontWeight(.bold)
                                .fixedSize(horizontal: false, vertical: true)
                        }
                    }
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 8)
                            .fill(index == selectedIndex ? Color.pointBlue : Color.blue1)
                    )
                    .id(index)
                    .frame(height: itemHeight)
                    .padding(.vertical, index == selectedIndex ? 28 : 20)
                    .onTapGesture {
                        Router.shared.navigate(to: .learningStart(quote: character.quotes[index]))
                        AVAudioApplication.requestRecordPermission { granted in
                            if granted {
                                print("ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌóàÏö©ÎêòÏóàÏäµÎãàÎã§.")
                            } else {
                                print("ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.")
                            }
                        }
                    }
                }
                
                Spacer().frame(height: itemHeight * 2.5) // Ïä§ÌÅ¨Î°§ Ïó¨Ïú† Í≥µÍ∞Ñ
            }
            .scrollTargetLayout()
            .padding()
        }
        .background(.white)
        .scrollPosition(id: $selectedIndex, anchor: .center)
        .scrollTargetBehavior(.viewAligned)
        .scrollIndicators(.hidden)
        .frame(height: 391)
        .cornerRadius(20)
    }
}

#Preview {
    CharacterDetailView(character: Character(name: "Í≥†Ï£†", favorite: false))
}
